log_format logger-json escape=json '{"source": "nginx","time": $msec,"resp_body_size": $body_bytes_sent,"host": "$http_host","address": "$remote_addr","request_length": $request_length,"method": "$request_method","uri": "$request_uri","status": $status,"user_agent": "$http_user_agent","resp_time": $request_time,"upstream_addr": "$upstream_addr","request_headers": "$req_header","response_headers": "$resp_header","request_body": "$request_body","response_body": "$resp_body"}';

server {
    listen 80;
    listen [::]:80;

    access_log /var/log/nginx_access.log logger-json;
    access_log /dev/stdout;

    location ~ ^/openai/(.*)$ {

        proxy_buffering off;
        resolver $DNS_SERVER;
        set $path $http_x_openai_backend;
        proxy_pass https://$path/openai/$1$is_args$args;

    }

    set $req_header "";
    set $resp_header "";
    header_filter_by_lua_block {

        local h = ngx.req.get_headers()
        for k, v in pairs(h) do

            -- Check if the header is Authorization and starts with "Bearer "
            if k == "authorization" and string.sub(v, 1, 7) == "Bearer " then

            -- Remove the bearer token before the authorization header is logged
                ngx.var.req_header = ngx.var.req_header .. k .. ": Bearer" .. " | ";
            else
                ngx.var.req_header = ngx.var.req_header .. k .. ": " ..  v  .. " | ";
            end
        end

        local h2 = ngx.resp.get_headers()
        for k2, v2 in pairs(h2) do
            -- Build a string of response headers and separate them by a pipe
            ngx.var.resp_header = ngx.var.resp_header .. k2 .. ": " .. v2 .. " | ";
        end

    }

    set $resp_body "";
    body_filter_by_lua_block {
        ngx.var.resp_body = ngx.var.resp_body .. ngx.arg[1];
    }
}