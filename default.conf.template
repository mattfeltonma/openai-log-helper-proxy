log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" "$http_x_openai_backendurl" ||| "$req_header" ||| "$resp_header" ||| "$resp_body"';

log_format  proxy_log  '[$time_local] $remote_addr - $remote_user "$host$request_uri" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      ' Proxy: "$proxy_host" "$upstream_addr"';
server {
    listen 80;
    listen [::]:80;

    access_log /var/log/nginx_access.log main;
    access_log /var/log/nginx_proxy.log proxy_log;
    access_log /dev/stdout;
    
    location ~ ^/openai/(.*)$ {
       proxy_buffering off;
       resolver $DNS_SERVER;
       set $path $http_x_openai_backendurl;
       proxy_pass $path/openai;
    }

    set $req_header "";
    set $resp_header "";
    header_filter_by_lua_block {
        local h = ngx.req.get_headers()
        for k, v in pairs(h) do
            -- ngx.log(ngx.CRIT, "Got Req header "..k..": "..v..";")
            ngx.var.req_header = ngx.var.req_header .. k .. ": " .. v .. " | ";
        end
        local h2 = ngx.resp.get_headers()
        for k2, v2 in pairs(h2) do
            -- ngx.log(ngx.CRIT, "Got Resp header "..k2..": "..v2..";")
            ngx.var.resp_header = ngx.var.resp_header .. k2 .. ": " .. v2 .. " | ";
        end
    }

    set $resp_body "";
    body_filter_by_lua_block {
        -- ngx.log(ngx.CRIT,ngx.arg[1])
        ngx.var.resp_body = ngx.var.resp_body .. " " .. ngx.arg[1];
    } 
}